Username: binexp
Password: Eric_Johnson
Step 0: IMPORTANT!!
You will need to run a few commands to get the course material, as well as install/update two packages to complete this project.
You can copy and paste below codes into a terminal and run them one at a time:
wget https://cs6035.s3.amazonaws.com/binexp/Fall2024/binexp.sh
chmod 777 binexp.sh ;./binexp.sh
The binexp.sh script can be re-ran at any point in this project and will allow you to re-download a fresh copy of the project material, and make a backup of your existing project_binep.json and ~/binexp/ folder.
Go here for project details on the course Github Pages site:
https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/

Task 1_bb 

What value is currently in RBX?: 0x400044
Correct! Now what is the value in R15?: 0xfafbfbfbf




https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/01_bb_steps.html







01_basic_overflow_1

https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/01_buffer_overflow_1.html

Note: really overflow this 


Basic overflow 2

Follow the write up 

https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/01_buffer_overflow_2.html


Task 02_assemble_the_assembly



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "../../shared/kernels_lib.c"

void* caller;
void which_gadget() {
	int selection;
	int done = 0;
	char buffer[200];	
	unsigned int instructions[3];
	__asm("mov ebx, 0xa0a0");
	int tracker = 0;
	while (tracker < 5) {
	
    	  printf("select your next string! : \n");
	  scanf("%d",&selection);
	  switch(selection) {
		case(0): {__asm("mov bl, 0xfa"); break;}
		case(1): {__asm("mov rbx, 0x400000"); break;}
		case(2): {__asm("mov bx, 0x19fa"); break;}
		case(3): {__asm("ret"); break; }
		case(4): {__asm("pop rbp"); break; }
		case(6): {__asm("mov byte ptr [rbx], 0x400000"); break;}
		case(7): {__asm("call [rbx]"); break; }
		case(8): {__asm("add rbx, 0x1n900"); break;}
		case(9): {__asm("mov rbx, [0x400000]"); break;}
		default: { done = 1; break;}n
	  }
	  tracker++;
	}

}
int main(int argc, char* argv[]){
	which_gadget();
  	return 0;
}

void do_it() {
	call_me();
}



pwndbg> n


	YOU'RE IN GDB THIS IS A DEMO KEY
	MAKE SURE TO RERUN THIS FLAG WITHOUT DBG TO GET THE REAL FLAG!


Program received signal SIGSEGV, Segmentation fault.
__vfscanf_internal (s=0x0, format=0x402103 "%s", argptr=argptr@entry=0x7fffffff7700, mode_flags=mode_flags@entry=2) at ./stdio-common/vfscanf-internal.c:345
warning: 345	./stdio-common/vfscanf-internal.c: No such file or directory
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA

NOTE: Learn GDB and what those assembly code means. 




Task 02_bad_rand0

Note: you can write a python code or guess

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "../../shared/kernels_lib.c"

char name[12];

int main(int argc, char* argv[]){
  printf("Oopsie, i leaked a bit of libc's address :( \n\t%lx\n",(u_int64_t)(&system) & 0xFFFFFFFFFFFF0000);
//  kernel_init(argv,1);

SORRY CAN'T POST CODE



  }
  return 0;

}


Task 02_p4s5w0rd

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "../../shared/kernels_lib.c"
#include "checker.h"

char name[12];

int main(int argc, char* argv[]){
  u_int8_t visited = 0;
  int value;
  int ret = 0;
SORRY CAN'T POST CODE

  }
    	
  call_me();
  return 0;

}

void can_you_call_me() {
  call_me();




bzzzzt?
%20s
z4pd0s
minty fresh?
art1cUn0
hothothothothothot!!!
m0l7re5
pika?
p1k4cHu
	NOPE WRONG
9*3$"



Flag 02_the_server_client_one Thread

https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/02_the_server_client_one.html

Note: don’t overthink and just overload it

Learn how to use pwntools


Task 03_XORbius

https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/03_XORbius.html

Note: 
For i = 0: XOR_string >> (0 * 8) & 0xFF → 0xEF (binary: 11101111)
For i = 1: XOR_string >> (1 * 8) & 0xFF → 0xBE (binary: 10111110)
For i = 2: XOR_string >> (2 * 8) & 0xFF → 0xAD (binary: 10101101)
For i = 3: XOR_string >> (3 * 8) & 0xFF → 0xDE (binary: 11011110

Shift 8 bits
202


204

206

208
            

             


0xDEADBEEF in binary:

11011110 10101101 10111110 11101111

0xEFBEADDE in binary:

11101111 10111110 10101101 11011110
Now, XOR each corresponding bit:

11011110 10101101 10111110 11101111
XOR
11101111 10111110 10101101 11011110
-------------------------------
00110001 00010011 00010011 00110001


0x31 00110001

0x19 00011001

Buffer[201] = 'a' = 01100001
Buffer[202] = 'a' = 01100001
Buffer[203] = 'b' = 01100010   0xFD = 11111101 (binary)
Buffer[204] = 'a' = 01100001  0x19 00011001
Buffer[205] = 'a' = 01100001
Buffer[206] = 'c' = 01100011
Buffer[207] = 'a' = 01100001



Task 03_pointy_pointy_point

https://github.gatech.edu/pages/cs6035-tools/cs6035-tools.github.io/Projects/BinExp/03_pointy_pointy_point.html


Add 23 bytes


Adding 1 byte x00



pwndbg> display protector
1: protector = (int *) 0x15e52a0
pwndbg> display some_other_value
2: some_other_value = 65535


Overwriting Protector

pwndbg> display protector
1: protector = (int *) 0xbadf00d
pwndbg> display some_other_value
2: some_other_value = 65535




Task 3 last one

** check for which checksum file is modified 

import hashlib
import os

def sha1_hash_of_file(file_path):
    """Calculate the SHA-1 hash of a file."""
    sha1 = hashlib.sha1()
SORRY CAN'T POST CODE


    return sha1.hexdigest()

def load_known_checksums(checksums_file):
    """Load the known good checksums from a file into a dictionary."""
    known_checksums = {}
    with open(checksums_file, 'r') as file:
SORRY CAN'T POST CODE


    return known_checksums

def find_modified_file(directory, known_checksums_file):
    """Find the modified file by comparing SHA-1 hashes with known values."""
    # Load known checksums
    known_checksums = load_known_checksums(known_checksums_file)
    modified_files = []

    # Walk through the directory, hashing each file except 'checksums' and 'user.txt'
    for root, _, files in os.walk(directory):
        for file_name in files:


        SORRY CAN'T POST CODE


        
            else:
                print(f"Warning: {relative_file_path} is not in known checksums list.")

    return modified_files

# Usage example with current directory
directory_path = '.'
checksums_file = 'checksums'

# Find and print any modified files
modified_files = find_modified_file(directory_path, checksums_file)
if modified_files:
    print("Modified files detected:")
    for file, hash in modified_files:
        print(f"{file}: {hash}")
else:
    print("No modified files detected.")



