** Make sure to download the same version extension and VMbox

** for the shellshock server - uncheck the floppy disk


Task 1: 

Summary: 
After looking at my NAT or ifconfig, I use nmap with -sn flag to find what is on the network and then jump to -sV flag to find the service available as I am looking for apache. After finding the ip address and port number, I will verify by simple curl command.  

To find the IP address on the network



Active IP 
10.0.2.1
10.0.2.4 //using ifconfig and I am this
10.0.2.5 //nmap -sV and this is possible shellshock server

└─$ nmap -sV 10.0.2.5
Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-20 10:55 EST
Nmap scan report for 10.0.2.5
Host is up (0.0066s latency).
Not shown: 993 closed tcp ports (conn-refused)
PORT     STATE SERVICE    VERSION
21/tcp   open  ftp        vsftpd 2.3.5
22/tcp   open  ssh        OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
23/tcp   open  telnet     Linux telnetd
53/tcp   open  domain     ISC BIND 9.8.1-P1
80/tcp   open  http       Apache httpd 2.2.22 ((Ubuntu))
3128/tcp open  http-proxy Squid http proxy 3.1.19
8080/tcp open  http       Apache httpd 2.2.22 ((Ubuntu))
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel


URL: http://<IP address of the shellshock_server VM>:<http port found in part 1>/cgi-bin/shellshock.cgi

http://10.0.2.5:80



Testing - http://10.0.2.5:80/cgi-bin/shellshock.cgi

Task 2: Attack CGI Program– (20 points)

Summary: 
The Shellshock vulnerability (CVE-2014-6271) is a serious security flaw that affected the Bash shell. It allowed attackers to execute arbitrary commands on a vulnerable system by manipulating environment variables. This could lead to complete system compromise.

In this task, you will launch the Shellshock attack on a remote web server. Many web servers enable CGI, which is a standard method used to generate dynamic content on Web pages and Web applications. 

http://10.0.2.5:80/cgi-bin/shellshock.cgi

Steps: 
Confirm connection
Crafting my curl http request command 






Task 3: Reverse Shell with Metasploit – (25 points)
Now you have successfully launched the Shellshock attack, and you can execute commands on the server VM. However, during a penetration test, you likely won’t have time to craft a payload for every exploit you use. And, what if the server was not in fact vulnerable to shellshock. How would you know if your exploit failed because
it was wrong, or because there was not a vulnerability?

Steps:
Open msfconsole and search for exploit ShellShock
multi/http/apache_mod_cgi_bash_env_exec
Use payload linux/x86/meterpreter
Get into a shell with shell



steps
a. logging into the msfconsole and search for exploit shellshock
b. run the exploit and set the correct parameter
c. make sure to get a shell in meterpreter 

https://www.offsec.com/metasploit-unleashed/meterpreter-basics/










Task 4: Privilege Escalation – (20 points)
Your goal: You aim to upgrade the privilege for your command shell by exploiting the setUID vulnerability. You will run /bin/task4 as the higher privileged user “shellshock_server”, not the default user “www-data”.
1. Has a higher privilege than the default user.
2. Can spawn a shell.

a. start with "find" setUID
b. check permission on every item in the /usr/bin and found mawk has permission shellshocker
c. research how to start shell with mawk // https://gtfobins.github.io/gtfobins/mawk/
d. accessed the shell and then ./bin/task4 jzeng99

Useful Resource: https://gtfobins.github.io/
You may want to ransack /usr/bin for a program which has a higher privilege than the default user and run /bin/task4 gt_username in the shell spawned.













Task 5: Password Cracking - (25 points)
An invaluable part of any penetration test is password cracking. While there may be no known vulnerabilities in a system, a weak password could be just as damaging in allowing an attacker to gain access to a system (or view sensitive information once they gain access). We’re going to look at two kinds of weak passwords in this task: passwords that are too short, and passwords that can easily be guessed via password scraping.
To begin, start a Meterpreter shell (using a meterpreter shell payload) through the Metasploit shellshock module in Task 3. A Meterpreter shell is different from the reverse TCP shell in Task 3, as it allows you to run Metasploit specifi c commands on the vulnerable machine (like download). Navigate to /home/shellshock_server/secret_files/. There are two encrypted .pyc fi les here. task51.zip is encrypted with zip, while task52.pyc.gpg is encrypted with gpg (a common fi le encryption tool in Linux). Download these two fi les (task51.zip and task52.pyc.gpg) to your Kali VM using the meterpreter.
We already know the developers of this web server are not very security savvy, since they let a shellshock vulnerability plus a setUID exploit give a high privilege shell on their machine. So, chances are they did not pick very secure passwords for these secret fi les. Your goal in this task is to crack the passwords of these two fi les using John the Ripper (a popular password cracker) and cewl (a password scraper).
The command line tools used in Task 5 are in /usr/sbin on the Kali VM. To run them, you can either add /usr/sbin to the $PATH variable or write /usr/sbin/ before each command.
You should use zip2john and gpg2john to extract the password hashes from the encrypted fi les. For task51.zip, try running John the Ripper incrementally. Report your John the Ripper command in assignment_questionnaire.txt (whether you also report your the zip2john and gpg2john commands is up
GT CS 6262: Network Security
to you, but they will not be graded).
For task52.pyc.gpg, try running John the Ripper incrementally again. Hmm… it seems to run forever. That is because John the Ripper is trying every combination of characters. If the password is too long (among other things), John the Ripper could run for years before it fi nds it.
Just because the password is too long to be found incrementally, does not mean it cannot be cracked. Take a look at the shellshock.cgi page in the browser. It looks like it gives a link to a profi le of the authors. If the authors are not great at picking secure passwords, maybe the password is something about them that we can guess from their profi le page.
But, even if the password is on the profi le page, it can still take a while to guess by hand. What if the password was kItt3n$ or deVEL0p3r. It would be hard to guess that, even if the word it was based on (like “kittens”, or “developer”) was on the profi le page.
Instead, let us use







Useful Links and References:
● Shellshock Vulnerability
◦ https://github.com/carter-yagemann/ShellShock
◦ https://en.wikipedia.org/wiki/Shellshock_(software_bug)
◦ http://seclists.org/oss-sec/2014/q3/650
● curl
◦ https://curl.haxx.se/docs/manpage.html
◦ https://curl.haxx.se/download.html (curl.exe for Windows)
● netcat
◦ https://linux.die.net/man/1/nc
◦ https://eternallybored.org/misc/netcat/ (nc.exe for Windows)
● nmap
◦ https://nmap.org/book/man.html
◦ Service and Version Detection | Nmap Network Scanning
● Metasploit
◦ https://www.offensive-security.com/metasploit-unleashed/metasploit-fundamentals/
● John the Ripper
◦ https://www.openwall.com/john/doc/
● cewl
◦ https://tools.kali.org/password-attacks/cewl

